[{"D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\index.js":"1","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\AddTaskForm\\AddTaskForm.jsx":"2","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\services\\authservice.js":"3","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\AddTask\\AddTask.jsx":"4","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\App\\App.jsx":"5","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\TasksPage\\TasksPage.jsx":"6","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\Login\\Login.jsx":"7","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\Register\\Register.jsx":"8","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\services\\tasksservice.js":"9","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\UserTaskItem\\UserTaskItem.jsx":"10","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\NavBar\\NavBar.jsx":"11","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\Home\\Home.jsx":"12","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\AppFallBack\\AppFallBack.jsx":"13"},{"size":291,"mtime":1606656254292,"results":"14","hashOfConfig":"15"},{"size":4953,"mtime":1606835356147,"results":"16","hashOfConfig":"15"},{"size":1394,"mtime":1606846015540,"results":"17","hashOfConfig":"15"},{"size":1278,"mtime":1606816151928,"results":"18","hashOfConfig":"15"},{"size":808,"mtime":1606845927887,"results":"19","hashOfConfig":"15"},{"size":3032,"mtime":1606831523000,"results":"20","hashOfConfig":"15"},{"size":4768,"mtime":1606833845371,"results":"21","hashOfConfig":"15"},{"size":5510,"mtime":1606823679685,"results":"22","hashOfConfig":"15"},{"size":1178,"mtime":1606846019748,"results":"23","hashOfConfig":"15"},{"size":3759,"mtime":1606820912138,"results":"24","hashOfConfig":"15"},{"size":2074,"mtime":1606835969337,"results":"25","hashOfConfig":"15"},{"size":2570,"mtime":1606845898792,"results":"26","hashOfConfig":"15"},{"size":512,"mtime":1606840138719,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"pzgbog",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36","usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\index.js",[],["64","65"],"D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\AddTaskForm\\AddTaskForm.jsx",["66"],"﻿import React, { useState,useRef} from 'react';\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport TaskService from \"../../services/tasksservice\"\r\nimport './AddTaskForm.scss';\r\n\r\nconst required = (value) => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Это поле обязательно!\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst AddTaskForm = () => {\r\n\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n    const [taskName, setTaskName] = useState('');\r\n    const [taskTime, setTaskTime] = useState(25);\r\n    const [taskDescription, setTaskDescription] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeTaskName=((e) => {\r\n        setTaskName(e.target.value);\r\n    });\r\n\r\n    const onChangeTaskTime =((e) => {\r\n        setTaskTime(e.target.value);\r\n    });\r\n\r\n    const onChangeTaskDescription = ((e) => {\r\n        setTaskDescription(e.target.value);\r\n    });\r\n       \r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n      \r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            let testmessage = \"\";\r\n            setLoading(true);\r\n            TaskService.AddTask(taskName, taskTime, taskDescription).then(\r\n                () => {\r\n                    window.location.reload();\r\n                    setLoading(false);\r\n                },\r\n                (error) => {\r\n                    console.debug(error.response);\r\n                    testmessage = error.toString();\r\n                    setLoading(false);\r\n                });\r\n\r\n            setMessage(testmessage);\r\n        }\r\n        else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const onCloseButtonClick = (e) => {\r\n    document.getElementById('addForm').style.cssText = 'display:none';\r\n    let addbtns = [null];\r\n    addbtns = Array.from(document.getElementsByClassName('btn-lg'));\r\n    addbtns.forEach(i => i.style.cssText = \"display:inline-flex\");\r\n\r\n    document.getElementById('UserTasks').style.cssText = \"display:block\";     // Скрываем список задач\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return <div id=\"addForm\">\r\n        <i className=\"fas fa-times fa-lg closeButton \" onClick={onCloseButtonClick}></i>  \r\n\r\n        <Form onSubmit={handleLogin} ref={form}>\r\n\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"taskName\">Название</label>\r\n                <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"taskName\"\r\n                    value={taskName}\r\n                    placeholder=\"Спасти этом мир\"\r\n                    onChange={onChangeTaskName}\r\n                    validations={[required]}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"taskTime\">Примерное время на задачу</label>\r\n                <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"taskTime\"\r\n                    value={taskTime}\r\n                    onChange={onChangeTaskTime}\r\n                    validations={[required]}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"taskDescription\">Описание</label>\r\n                <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"необязательно\"\r\n                    name=\"taskDescription\"\r\n                    value={taskDescription}\r\n                    onChange={onChangeTaskDescription}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <button className=\"btn btn-primary\" disabled={loading}>\r\n                  \r\n                    <span>Добавить задачу</span>\r\n                </button>\r\n                {loading && (\r\n                    <div className=\"loading-container\">\r\n                        <div className=\"yellow\"></div>\r\n                        <div className=\"red\"></div>\r\n                        <div className=\"blue\"></div>\r\n                        <div className=\"violet\"></div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {message && (\r\n                <div className=\"form-group\">\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        {message}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n\r\n\r\n        </div>\r\n\r\n\r\n}\r\n\r\nexport default AddTaskForm;","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\services\\authservice.js",["67","68"],"﻿import axios from \"axios\";\r\n\r\nconst url = \"https://pomodorotodotracker.herokuapp.com/account\"\r\n\r\n\r\n\r\nconst register = (email, firstName, password) => {\r\n    let lastName ='не используется'\r\n    return axios.post(url + '/signup', {\r\n        email,\r\n        password,\r\n        firstName,\r\n        lastName\r\n    }\r\n    ).then((respone) => {\r\n        if (respone.data.token) {\r\n            localStorage.setItem('user', JSON.stringify(respone.data));\r\n        }\r\n\r\n        return respone.data;\r\n\r\n\r\n       \r\n    });\r\n    \r\n};\r\n\r\nconst login = (email, password) => {\r\n\r\n\r\n        return axios.post(url + '/signin', {\r\n        email,\r\n        password\r\n    }\r\n    ).then((respone) => {\r\n        console.log(respone);\r\n        if (respone.data.token) {\r\n            localStorage.setItem('user', JSON.stringify(respone.data));\r\n        }\r\n\r\n\r\n        return respone.data;\r\n    }).catch((err) => {\r\n        return err;\r\n    });\r\n\r\n  \r\n};\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem('user');\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem('user'));\r\n};\r\n\r\nconst getAuthToken = ()=>{\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (user && user.token) {\r\n        return (user.token);\r\n    }\r\n    else return {};\r\n}\r\n\r\nexport default {\r\n    login,\r\n    register,\r\n    logout,\r\n    getCurrentUser,\r\n    getAuthToken\r\n}\r\n\r\n","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\AddTask\\AddTask.jsx",["69","70","71"],"﻿import './AddTask.scss';\r\nimport React from 'react';\r\nimport AuthService from '../../services/authservice';\r\nimport { useState } from 'react';\r\n\r\n//Отвечает за открытие/закрытие форм\r\nconst AddTask = (FirstTask) => {\r\n\r\n\r\n\r\n    const AddButtonClick = (e) => {\r\n        let addbtns = [null];\r\n\r\n        addbtns = Array.from(document.getElementsByClassName('btn-lg'));\r\n        addbtns.forEach(i => i.style.cssText = \"display:none\");\r\n        document.getElementById('addForm').style.cssText = \"display:block\";\r\n        document.getElementById('UserTasks').style.cssText = \"display:none\";     // Скрываем список задач\r\n        \r\n\r\n    \r\n\r\n    };\r\n\r\n\r\n  \r\n    return <div>\r\n     \r\n        {FirstTask.FirstTask &&(\r\n        <div>\r\n            <button type=\"button\" className=\"btn btn-success btn-lg\" onClick={AddButtonClick}>Добавить первую задачу</button>\r\n             </div>\r\n        \r\n            )}\r\n        {!FirstTask.FirstTask && (\r\n            <div>\r\n                <button type=\"button\" className=\"btn btn-light btn-lg fixed-bottom\" onClick={AddButtonClick}> + Добавить задачу</button>\r\n            </div>\r\n                  \r\n        )}\r\n\r\n\r\n    </div>\r\n\r\n\r\n}\r\nexport default AddTask;",["72","73"],"D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\App\\App.jsx",["74","75"],"D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\TasksPage\\TasksPage.jsx",["76"],"D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\Login\\Login.jsx",["77"],"﻿import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport './Login.scss';\r\nimport AuthService from \"../../services/authservice\";\r\n\r\nconst required = (value) => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Это поле обязательно!\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Login = (props) => {\r\n    document.title = \"Войти\"\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeUsername = (e) => {\r\n        const username = e.target.value;\r\n        setUsername(username);\r\n    };\r\n\r\n    const onChangePassword = (e) => {\r\n        const password = e.target.value;\r\n        setPassword(password);\r\n    };\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            AuthService.login(username, password).then(\r\n                (r) => {\r\n                    props.history.push(\"/tasks\");\r\n                    window.location.reload();\r\n                },\r\n                (error) => {\r\n                    console.log(error);\r\n                    let resMessage = ''\r\n                    if (error.response.status === 404) {\r\n                        resMessage = \"Ошибка 404: e-mail не найден\";\r\n                    }\r\n                    else if (error.response.status === 500) {\r\n                        resMessage = \"Ошибка 500: проверьте интернет\";\r\n                    }\r\n                    else if (error.response.status === 400) {\r\n                        resMessage = \"Ошибка 400: неверный пароль\";\r\n                    }\r\n\r\n                    else resMessage = error.toString();\r\n                    setLoading(false);\r\n                    setMessage(resMessage);\r\n                }\r\n            );\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"col-md-12\">\r\n            <div className=\"card card-container\">\r\n\r\n\r\n                <Form onSubmit={handleLogin} ref={form}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Email</label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Пароль</label>\r\n                        <Input\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={onChangePassword}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\" disabled={loading}>\r\n                            {loading && (\r\n                                <div className=\"loading-container\">\r\n                                    <div className=\"yellow\"></div>\r\n                                    <div className=\"red\"></div>\r\n                                    <div className=\"blue\"></div>\r\n                                    <div className=\"violet\"></div>\r\n                                </div>   \r\n                            )}\r\n                            <span>Войти</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    {message && (\r\n                        <div className=\"form-group\">\r\n                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\Register\\Register.jsx",["78","79"],"﻿import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport AuthService from \"../../services/authservice\";\r\nimport { Redirect } from 'react-router-dom';\r\nconst required = (value) => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Это поле обязательно!\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Register = (props) => {\r\n    document.title = \"Регистрация\"\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeUsername = (e) => {\r\n        const username = e.target.value;\r\n        setUsername(username);\r\n    };\r\n    const onChangeFirstName = (e) => {\r\n        const firstName = e.target.value;\r\n        setFirstName(firstName);\r\n    }\r\n\r\n    const onChangePassword = (e) => {\r\n        const password = e.target.value;\r\n        setPassword(password);\r\n    };\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            AuthService.register(username,firstName,password).then(\r\n                () => {\r\n\r\n                    props.history.push(\"/tasks\");\r\n                    window.location.reload();\r\n        \r\n                },\r\n                (error) => {\r\n                    let resMessage = ''\r\n                    if (error.response.status === 409) {\r\n                        resMessage = \"Ошибка 409: такой e-mail уже найден\";\r\n                    }\r\n                    else if (error.response.status === 500) {\r\n                        resMessage = \"Ошибка 500: проверьте интернет\";\r\n                    }\r\n                    else if (error.response.status === 400) {\r\n                        resMessage = \"Ошибка 400: форма заполнена неверно\";\r\n                    }\r\n\r\n                    else resMessage = error.toString();\r\n                    setLoading(false);\r\n                    setMessage(resMessage);\r\n                }\r\n            );\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"col-md-12\">\r\n            <div className=\"card card-container\">\r\n\r\n\r\n                <Form onSubmit={handleLogin} ref={form}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Email</label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Имя</label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={firstName}\r\n                            onChange={onChangeFirstName}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Пароль</label>\r\n                        <Input\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={onChangePassword}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\" disabled={loading}>\r\n                            {loading && (\r\n                                <div className=\"loading-container\">\r\n                                    <div className=\"yellow\"></div>\r\n                                    <div className=\"red\"></div>\r\n                                    <div className=\"blue\"></div>\r\n                                    <div className=\"violet\"></div>\r\n                                </div>   \r\n                            )}\r\n                            <span>Регистрация</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    {message && (\r\n                        <div className=\"form-group\">\r\n                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\services\\tasksservice.js",["80"],"import axios from 'axios';\r\nimport AuthService from './authservice'\r\n\r\nconst backurl =\"https://pomodorotodotracker.herokuapp.com/tasks\"\r\nconst headers = {\r\n    \"Authorization\": \"Bearer \" + AuthService.getAuthToken(),\r\n    'Content-Type': 'application/json'\r\n}\r\n\r\nconst GetTasks = () => {\r\n\r\n\r\n    return axios.get(backurl, {\r\n        headers: headers\r\n    }).then((response) => {\r\n        return response.data;\r\n    });\r\n};\r\n\r\nconst UpdateTaskStatus = (task) => {\r\n    return axios.put(backurl +'/updatestatus', task,{\r\n        headers: headers,\r\n       \r\n    });\r\n}\r\n\r\nconst DeleteTask = (id) => {                       \r\n \r\n    return axios.delete(backurl + '/delete/' + id, {\r\n        headers: headers\r\n    });\r\n}\r\n\r\n\r\n\r\nconst AddTask = (taskName, taskTime, taskDescription = '��� ��������') => {\r\n\r\n    const task = {\r\n        taskName: taskName,\r\n        taskTime: taskTime,\r\n        taskDescription: taskDescription\r\n    }\r\n    return axios.post(backurl + '/addtask', task,{\r\n       headers:headers\r\n  \r\n\r\n    }).then((response) => {\r\n        return response.data;\r\n    });\r\n};\r\n\r\n\r\nexport default {\r\n    GetTasks,\r\n    AddTask,\r\n    DeleteTask,\r\n    UpdateTaskStatus\r\n}\r\n","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\UserTaskItem\\UserTaskItem.jsx",["81"],"﻿import React, { useState } from 'react';\r\nimport './UserTaskItem.scss';\r\nimport TasksService from '../../services/tasksservice'\r\n//Непосредственно список задач пользователя или сообщение об его отсутсвии\r\nconst UserTaskItem = (task) => {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n    const onDeleteButtonClick = () => {\r\n        setLoading(true);\r\n        TasksService.DeleteTask(task.task.id).then(() => {\r\n            setLoading(false);\r\n        },\r\n            (error) => {\r\n                setLoading(false);\r\n                console.log(error.response);\r\n            });\r\n    };\r\n\r\n    const onFinishButtonClick = () => {\r\n        setLoading(true);\r\n        let starttask = task.task;     //Что бы не крутился значок раньше времени\r\n        starttask.isDone = true;\r\n        TasksService.UpdateTaskStatus(starttask).then(() => {\r\n            task.task.inDone= true;\r\n            setLoading(false);\r\n        },\r\n            (error) => {\r\n                console.log(error.response);\r\n                setLoading(false);\r\n            });\r\n\r\n    };\r\n \r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n    const onStartButtonClick = (e) => {\r\n        setLoading(true);\r\n        let starttask = task.task;     //Что бы не крутился значок раньше времени\r\n        starttask.inProgress = true;\r\n        TasksService.UpdateTaskStatus(starttask).then(() => {\r\n            task.task.inProgress = true;\r\n            e.target.style.cssText = \"display:none\";\r\n            document.getElementById('pauseBtn').style.cssText = 'display:inline';\r\n            setLoading(false);\r\n        },\r\n        (error) => {\r\n            console.log(error.response);\r\n            setLoading(false);\r\n            });\r\n\r\n    };\r\n    const onPauseButtonClick = (e) => {\r\n        setLoading(true);\r\n        let starttask = task.task;\r\n        starttask.inProgress = false;\r\n        TasksService.UpdateTaskStatus(starttask).then(() => {\r\n\r\n            task.task.inProgress = false;\r\n            e.target.style.cssText = \"display:none\";\r\n            document.getElementById('startBtn').style.cssText = 'display:inline';\r\n            setLoading(false);\r\n        },\r\n            (error) => {\r\n                console.log(error.response);\r\n                setLoading(false);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\nreturn <div className=\"userTaskItem container-fluid\">\r\n         {task.task.inProgress && !task.task.isDone && (\r\n          <i className=\"fas fa-circle-notch fa-spin taskbtn doneBtn\" onClick={onFinishButtonClick}></i>\r\n        )}\r\n\r\n        {task.task.isDone && (\r\n        <i className=\"fas fa-check-circle  taskbtn doneBtn\" ></i>\r\n        )}\r\n\r\n         {!task.task.inProgress && !task.task.isDone && (\r\n        <i className=\"fas fa-circle-notch taskbtn doneBtn\" onClick={onFinishButtonClick}></i>\r\n         )}\r\n\r\n        <span className=\"taskName\"> {task.task.taskName} </span>\r\n\r\n        <span className=\"taskTime\">\r\n        Текущий помидор : {task.task.currentPomodoroTime}\r\n         </span>\r\n\r\n        \r\n         \r\n        <i className=\"far fa-pause-circle taskbtn  \" id=\"pauseBtn\" onClick={onPauseButtonClick} />   \r\n        <i className=\"far fa-play-circle taskbtn  \" id=\"startBtn\" onClick={onStartButtonClick}/>   \r\n        <i className=\"far fa-minus-circle taskbtn  right\" onClick={onDeleteButtonClick}/> \r\n\r\n        {loading && (\r\n            <div className=\"loading-container\">\r\n                <div className=\"yellow\"></div>\r\n                <div className=\"red\"></div>\r\n                <div className=\"blue\"></div>\r\n                <div className=\"violet\"></div>\r\n            </div>   \r\n        )}\r\n\r\n    </div>\r\n}\r\nexport default UserTaskItem;","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\NavBar\\NavBar.jsx",["82"],"D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\Home\\Home.jsx",["83"],"﻿import React from 'react';\r\nimport './Home.scss';\r\nconst Home = () => {\r\n\r\n\r\n\r\n    return<div>\r\n    <div className=\"container-fluid\">\r\n        <div className=\"row no-gutters\">\r\n            <div className=\"col-8 img\" id=\"imgfirst\">         \r\n             </div>\r\n            <div className=\"col-4\" id=\"description\">\r\n             <h1> Зачем это нужно?</h1>\r\n             <p> Техника Помодоро - это эффективный способ управления своим временем.\r\n               Данное приложение поможет эффективнее работать над задачами и соблюдать промежутки</p>\r\n             <h1> <a href='/signup'> Попробовать </a>       </h1>\r\n        </div>\r\n     </div>\r\n     <div className=\"row no-gutters\">\r\n         <div className=\"col-4\" id=\"description\">\r\n             <h1>Как это работает?</h1>\r\n             <p>Вам необходимо лишь указать примерное время на задачу. Приложение само разобъет ее на нужное количество промежутков.\r\n             Запустите задачу, а приложение напонмит когда нужно будет сделать перерыв\r\n             </p>\r\n             <h1> <a href='/signup'> Попробовать </a>       </h1>\r\n             \r\n         </div>\r\n         <div className=\"col-8  img\" id=\"imgsecond\">\r\n        \r\n         </div>\r\n     </div>\r\n     <div className=\"row no-gutters\">\r\n         <div className=\"col-8 img\" id=\"imgthird\">\r\n    \r\n\r\n         </div>\r\n         <div className=\"col-4\" id=\"description\">\r\n             <i className=\"far fa-play-circle\"> Запускает задачу </i>\r\n             <i className=\"fas fa-circle-notch \">Завершает задачу</i>\r\n             <i className=\"far fa-minus-circle\" > Удаляет задачу</i>\r\n      \r\n         </div>\r\n     </div>\r\n     <div className=\"row no-gutters\">\r\n     \r\n         <div className=\"col-12\" id=\"description\">\r\n             <h1> Просто попробуйте! </h1>\r\n                <h2>Ваша продуктивность заметно вырастет</h2>\r\n                 <h1> <a href='/signup'> Попробовать </a>       </h1>\r\n         </div>                    \r\n\r\n             </div>\r\n    </div>\r\n      <div className=\"bg-light\">\r\n            © 2020 Denis Cherniy, mosavia.dc@gmail.com\r\n       </div>\r\n    </div>\r\n\r\n\r\n\r\n}\r\n\r\nexport default Home;","D:\\Работа это work\\mosaviaD.C\\Front-End PomodoroApp\\clientapp\\src\\components\\AppFallBack\\AppFallBack.jsx",["84"],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"93"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"94"},{"ruleId":"95","severity":1,"message":"96","line":67,"column":1,"nodeType":"97","endLine":73,"endColumn":2},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":8,"nodeType":"101","messageId":"102","endLine":3,"endColumn":19},{"ruleId":"99","severity":1,"message":"103","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":18},{"ruleId":"85","replacedBy":"104"},{"ruleId":"87","replacedBy":"105"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"106"},{"ruleId":"99","severity":1,"message":"107","line":4,"column":25,"nodeType":"101","messageId":"102","endLine":4,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"108"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"109"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"110"},{"ruleId":"99","severity":1,"message":"111","line":7,"column":10,"nodeType":"101","messageId":"102","endLine":7,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":53,"column":1,"nodeType":"97","endLine":58,"endColumn":2},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"112"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"113"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"114"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":1,"nodeType":"91","messageId":"92","fix":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"118","text":"119"},{"range":"120","text":"119"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"range":"121","text":"119"},"no-unused-vars","'AuthService' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["116"],["117"],{"range":"122","text":"119"},"'Link' is defined but never used.",{"range":"123","text":"119"},{"range":"124","text":"119"},{"range":"125","text":"119"},"'Redirect' is defined but never used.",{"range":"126","text":"119"},{"range":"127","text":"119"},{"range":"128","text":"119"},{"range":"129","text":"119"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]