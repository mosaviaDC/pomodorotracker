[{"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\App\\App.jsx":"1","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\Register\\Register.jsx":"2","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\Home\\Home.jsx":"3","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\index.js":"4","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\ForgotPassword\\ForgotPassword.jsx":"5","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\NavBar\\NavBar.jsx":"6","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\services\\authservice.js":"7","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\services\\tasksservice.js":"8"},{"size":1026,"mtime":1611432458365,"results":"9","hashOfConfig":"10"},{"size":5464,"mtime":1611419358317,"results":"11","hashOfConfig":"10"},{"size":4377,"mtime":1610719963703,"results":"12","hashOfConfig":"10"},{"size":302,"mtime":1610719963711,"results":"13","hashOfConfig":"10"},{"size":3598,"mtime":1611432410484,"results":"14","hashOfConfig":"10"},{"size":2269,"mtime":1610719963703,"results":"15","hashOfConfig":"10"},{"size":1521,"mtime":1611422261603,"results":"16","hashOfConfig":"10"},{"size":1180,"mtime":1610719963711,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"gxlw5a",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\App\\App.jsx",["37"],"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\Register\\Register.jsx",["38"],"﻿import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport AuthService from \"../../services/authservice\";\r\nconst required = (value) => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Это поле обязательно!\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Register = (props) => {\r\n    document.title = \"Регистрация\"\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeUsername = (e) => {\r\n        const username = e.target.value;\r\n        setUsername(username);\r\n    };\r\n    const onChangeFirstName = (e) => {\r\n        const firstName = e.target.value;\r\n        setFirstName(firstName);\r\n    }\r\n\r\n    const onChangePassword = (e) => {\r\n        const password = e.target.value;\r\n        setPassword(password);\r\n    };\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            AuthService.register(username,firstName,password).then(\r\n                () => {\r\n\r\n                    props.history.push(\"/tasks\");\r\n                    window.location.reload();\r\n        \r\n                },\r\n                (error) => {\r\n                    let resMessage = ''\r\n                    if (error.response.status === 409) {\r\n                        resMessage = \"Ошибка 409: такой e-mail уже найден\";\r\n                    }\r\n                    else if (error.response.status === 500) {\r\n                        resMessage = \"Ошибка 500: проверьте интернет\";\r\n                    }\r\n                    else if (error.response.status === 400) {\r\n                        resMessage = \"Ошибка 400: форма заполнена неверно\";\r\n                    }\r\n\r\n                    else resMessage = error.toString();\r\n                    setLoading(false);\r\n                    setMessage(resMessage);\r\n                }\r\n            );\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"col-md-12\">\r\n            <div className=\"card card-container\">\r\n\r\n\r\n                <Form onSubmit={handleLogin} ref={form}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Email</label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Имя</label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={firstName}\r\n                            onChange={onChangeFirstName}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Пароль</label>\r\n                        <Input\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={onChangePassword}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\" disabled={loading}>\r\n                            {loading && (\r\n                                <div className=\"loading-container\">\r\n                                    <div className=\"yellow\"></div>\r\n                                    <div className=\"red\"></div>\r\n                                    <div className=\"blue\"></div>\r\n                                    <div className=\"violet\"></div>\r\n                                </div>   \r\n                            )}\r\n                            <span>Регистрация</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    {message && (\r\n                        <div className=\"form-group\">\r\n                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n",["39","40"],"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\Home\\Home.jsx",["41"],"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\index.js",[],"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\ForgotPassword\\ForgotPassword.jsx",["42"],"import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport AuthService from \"../../services/authservice\";\r\nimport AppSendEmail from \"../AppSendEmail/AppSendEmail\"\r\nconst required = (value) => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Это поле обязательно!\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\n\r\nconst ForgotPassword =(props)=>{\r\n    document.title=\"Сбросить пароль\";\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n    const [Email, setEmail] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeEmail= (e) => {\r\n        const email = e.target.value;\r\n        setEmail(email);\r\n    };\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            AuthService.sendEmail(Email).then(\r\n            (r)=> {\r\n                props.history.push(\"/succesEmailSend\");\r\n                <AppSendEmail email= {Email} />\r\n                window.location.reload();\r\n            },\r\n            (error)=>{\r\n                setLoading(false);\r\n                setMessage(error + \"\\nПроверьте данные и попробуйте позже\");\r\n\r\n            }\r\n            );\r\n            \r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"col-md-12\">\r\n            <div className=\"card card-container\">\r\n\r\n\r\n                <Form onSubmit={handleLogin} ref={form}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Email</label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={Email}\r\n                            onChange={onChangeEmail}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                  \r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn btn-primary\" disabled={loading}>\r\n                            {loading && (\r\n                                <div className=\"loading-container\">\r\n                                    <div className=\"yellow\"></div>\r\n                                    <div className=\"red\"></div>\r\n                                    <div className=\"blue\"></div>\r\n                                    <div className=\"violet\"></div>\r\n                                </div>   \r\n                            )}\r\n                            <span>Сбросить пароль</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    {message && (\r\n                        <div className=\"form-group\">\r\n                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n}\r\nexport default ForgotPassword;","D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\components\\NavBar\\NavBar.jsx",["43","44"],"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\services\\authservice.js",["45","46"],"D:\\mosaviaDC\\PomodoroTracker\\pomodorotest\\src\\services\\tasksservice.js",["47"],{"ruleId":null,"fatal":true,"severity":2,"message":"48","line":19,"column":63},{"ruleId":"49","severity":1,"message":"50","line":1,"column":1,"nodeType":"51","messageId":"52","fix":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":1,"nodeType":"51","messageId":"52","fix":"58"},{"ruleId":"59","severity":2,"message":"60","line":44,"column":39,"nodeType":"61","messageId":"62","endLine":44,"endColumn":44},{"ruleId":"49","severity":1,"message":"50","line":1,"column":1,"nodeType":"51","messageId":"52","fix":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":8,"nodeType":"61","messageId":"66","endLine":3,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":1,"column":1,"nodeType":"51","messageId":"52","fix":"67"},{"ruleId":"68","severity":1,"message":"69","line":79,"column":1,"nodeType":"70","endLine":86,"endColumn":2},{"ruleId":"68","severity":1,"message":"69","line":53,"column":1,"nodeType":"70","endLine":58,"endColumn":2},"Parsing error: Unexpected token, expected \"...\"\n\n  17 |              <Route exact path=\"/signin\" component={Login} />\n  18 |              <Route exact path=\"/forgot\" component ={ForgotPassword} />\n> 19 |              <Route exact path =\"/succesEmailSend\" component {AppSendEmail} />\n     |                                                               ^\n  20 |              <Route path='*' exact component={AppFallBack} />\n  21 |          </Switch>\n  22 |","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"71","text":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],{"range":"75","text":"72"},"no-undef","'email' is not defined.","Identifier","undef",{"range":"76","text":"72"},"no-unused-vars","'TaskPage' is defined but never used.","unusedVar",{"range":"77","text":"72"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",[-1,0],"","no-global-assign","no-unsafe-negation",[-1,0],[-1,0],[-1,0]]